[buildout]
package-name = sde.videorent
package-extras = [test]

extends =
    http://dist.plone.org/release/4.3.20/versions.cfg
    versions.cfg

develop = .

eggs +=
    sde.videorent
    Pillow
    ipdb

parts +=
    instance
    createcoverage

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8081
zserver-threads = 2
debug-mode = off
verbose-security = off

environment-vars =
  PYTHON_EGG_CACHE ${buildout:directory}/python-eggs
  zope_i18n_compile_mo_files true

eggs =
    ${buildout:eggs}
    Plone
    

[createcoverage]
recipe = zc.recipe.egg
eggs = createcoverage


[i18ndude]
recipe = zc.recipe.egg
eggs = i18ndude


[coverage-sh]
recipe = collective.recipe.template
output = ${buildout:directory}/bin/coverage.sh
mode = 755
input = inline:
    #! /bin/sh
    # checks for report created with createcoverage and evaluate the result

    DEFAULT=${buildout:package-min-coverage}
    REPORT="htmlcov/index.html"

    if [ "$#" -eq 1 ] && [ $1 -ge 0 ] && [ $1 -le 100 ]; then
        MINIMUM=$1
    else
        echo "Invalid value for minimum coverage; using default: $DEFAULT%"
        MINIMUM=$DEFAULT
    fi

    if [ ! -f "$REPORT" ]; then
        if [ "$CI" ]; then
            # Use output dir to prevent opening a browser.
            bin/createcoverage --output-dir=htmlcov
        else
            bin/createcoverage
        fi
    fi

    if [ ! -f "$REPORT" ]; then
        echo "createcoverage went wrong: $REPORT does not exist"
        exit 1
    fi

    # find first percentage value in file (module test coverage) and return it
    COVERAGE=`grep "[0-9]\{1,3\}[%]" $REPORT -m 1 -o | grep "[0-9]\{1,3\}" -o`

    if [ $COVERAGE -lt $MINIMUM ]; then
        echo "Insufficient test coverage: $COVERAGE% (minimum acceptable is $MINIMUM%)"
        exit 1
    else
        echo "Current test coverage: $COVERAGE%"
        exit 0
    fi
